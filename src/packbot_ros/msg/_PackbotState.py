"""autogenerated by genmsg_py from PackbotState.msg. Do not edit."""
import roslib.message
import struct

import packbot_ros.msg
import std_msgs.msg

class PackbotState(roslib.message.Message):
  _md5sum = "cbe84a7a28d43f13c425dc8544170ceb"
  _type = "packbot_ros/PackbotState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
Velocity velocity
Orientation orientation
Brakes brakes
Flipper flipper
Arm arm

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: packbot_ros/Velocity
# raw linear velocity received from the packbot's odometer
# unit - meter per second
float64 linear
# raw angular velocity received from the packbot's odometer
# unit - radian per second
float64 angular

================================================================================
MSG: packbot_ros/Orientation
# raw roll value received from the packbot's inclinometer
# unit - radian
float64 roll
# raw pitch value received from the packbot's inclinometer
# unit - radian
float64 pitch
# raw yaw (heading) value received from the packbot's internal compass
# unit - radian
float64 yaw

================================================================================
MSG: packbot_ros/Brakes
# state of the main brake
# true if the brake is engaged and false otherwise
bool main
# state of the arm brake
# true if the brake is engaged and false otherwise
bool arm

================================================================================
MSG: packbot_ros/Flipper
# raw position of the packbot's flipper
# unit - radian
float64 position
# raw velocity of the packbot's flipper
# unit - radian per second
float64 velocity

================================================================================
MSG: packbot_ros/Arm
ArmJoint turret
ArmJoint shoulder
ArmJoint elbow1
ArmJoint elbow2
ArmJoint tilt
ArmJoint pan
ArmJoint wrist
ArmJoint grip

================================================================================
MSG: packbot_ros/ArmJoint
# name of the joint
string joint
# the numerical id of the joint
uint16 joint_id
# position of the joint
# unit - radian
float64 position
# velocity of the joint
# unit - radian per second
float64 velocity

"""
  __slots__ = ['header','velocity','orientation','brakes','flipper','arm']
  _slot_types = ['Header','packbot_ros/Velocity','packbot_ros/Orientation','packbot_ros/Brakes','packbot_ros/Flipper','packbot_ros/Arm']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,velocity,orientation,brakes,flipper,arm
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(PackbotState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.velocity is None:
        self.velocity = packbot_ros.msg.Velocity()
      if self.orientation is None:
        self.orientation = packbot_ros.msg.Orientation()
      if self.brakes is None:
        self.brakes = packbot_ros.msg.Brakes()
      if self.flipper is None:
        self.flipper = packbot_ros.msg.Flipper()
      if self.arm is None:
        self.arm = packbot_ros.msg.Arm()
    else:
      self.header = std_msgs.msg._Header.Header()
      self.velocity = packbot_ros.msg.Velocity()
      self.orientation = packbot_ros.msg.Orientation()
      self.brakes = packbot_ros.msg.Brakes()
      self.flipper = packbot_ros.msg.Flipper()
      self.arm = packbot_ros.msg.Arm()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5d2B2d.pack(_x.velocity.linear, _x.velocity.angular, _x.orientation.roll, _x.orientation.pitch, _x.orientation.yaw, _x.brakes.main, _x.brakes.arm, _x.flipper.position, _x.flipper.velocity))
      _x = self.arm.turret.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.arm.turret.joint_id, _x.arm.turret.position, _x.arm.turret.velocity))
      _x = self.arm.shoulder.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.arm.shoulder.joint_id, _x.arm.shoulder.position, _x.arm.shoulder.velocity))
      _x = self.arm.elbow1.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.arm.elbow1.joint_id, _x.arm.elbow1.position, _x.arm.elbow1.velocity))
      _x = self.arm.elbow2.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.arm.elbow2.joint_id, _x.arm.elbow2.position, _x.arm.elbow2.velocity))
      _x = self.arm.tilt.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.arm.tilt.joint_id, _x.arm.tilt.position, _x.arm.tilt.velocity))
      _x = self.arm.pan.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.arm.pan.joint_id, _x.arm.pan.position, _x.arm.pan.velocity))
      _x = self.arm.wrist.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.arm.wrist.joint_id, _x.arm.wrist.position, _x.arm.wrist.velocity))
      _x = self.arm.grip.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.arm.grip.joint_id, _x.arm.grip.position, _x.arm.grip.velocity))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.velocity is None:
        self.velocity = packbot_ros.msg.Velocity()
      if self.orientation is None:
        self.orientation = packbot_ros.msg.Orientation()
      if self.brakes is None:
        self.brakes = packbot_ros.msg.Brakes()
      if self.flipper is None:
        self.flipper = packbot_ros.msg.Flipper()
      if self.arm is None:
        self.arm = packbot_ros.msg.Arm()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 58
      (_x.velocity.linear, _x.velocity.angular, _x.orientation.roll, _x.orientation.pitch, _x.orientation.yaw, _x.brakes.main, _x.brakes.arm, _x.flipper.position, _x.flipper.velocity,) = _struct_5d2B2d.unpack(str[start:end])
      self.brakes.main = bool(self.brakes.main)
      self.brakes.arm = bool(self.brakes.arm)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.arm.turret.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.arm.turret.joint_id, _x.arm.turret.position, _x.arm.turret.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.arm.shoulder.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.arm.shoulder.joint_id, _x.arm.shoulder.position, _x.arm.shoulder.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.arm.elbow1.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.arm.elbow1.joint_id, _x.arm.elbow1.position, _x.arm.elbow1.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.arm.elbow2.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.arm.elbow2.joint_id, _x.arm.elbow2.position, _x.arm.elbow2.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.arm.tilt.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.arm.tilt.joint_id, _x.arm.tilt.position, _x.arm.tilt.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.arm.pan.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.arm.pan.joint_id, _x.arm.pan.position, _x.arm.pan.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.arm.wrist.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.arm.wrist.joint_id, _x.arm.wrist.position, _x.arm.wrist.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.arm.grip.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.arm.grip.joint_id, _x.arm.grip.position, _x.arm.grip.velocity,) = _struct_H2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5d2B2d.pack(_x.velocity.linear, _x.velocity.angular, _x.orientation.roll, _x.orientation.pitch, _x.orientation.yaw, _x.brakes.main, _x.brakes.arm, _x.flipper.position, _x.flipper.velocity))
      _x = self.arm.turret.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.arm.turret.joint_id, _x.arm.turret.position, _x.arm.turret.velocity))
      _x = self.arm.shoulder.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.arm.shoulder.joint_id, _x.arm.shoulder.position, _x.arm.shoulder.velocity))
      _x = self.arm.elbow1.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.arm.elbow1.joint_id, _x.arm.elbow1.position, _x.arm.elbow1.velocity))
      _x = self.arm.elbow2.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.arm.elbow2.joint_id, _x.arm.elbow2.position, _x.arm.elbow2.velocity))
      _x = self.arm.tilt.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.arm.tilt.joint_id, _x.arm.tilt.position, _x.arm.tilt.velocity))
      _x = self.arm.pan.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.arm.pan.joint_id, _x.arm.pan.position, _x.arm.pan.velocity))
      _x = self.arm.wrist.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.arm.wrist.joint_id, _x.arm.wrist.position, _x.arm.wrist.velocity))
      _x = self.arm.grip.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.arm.grip.joint_id, _x.arm.grip.position, _x.arm.grip.velocity))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.velocity is None:
        self.velocity = packbot_ros.msg.Velocity()
      if self.orientation is None:
        self.orientation = packbot_ros.msg.Orientation()
      if self.brakes is None:
        self.brakes = packbot_ros.msg.Brakes()
      if self.flipper is None:
        self.flipper = packbot_ros.msg.Flipper()
      if self.arm is None:
        self.arm = packbot_ros.msg.Arm()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 58
      (_x.velocity.linear, _x.velocity.angular, _x.orientation.roll, _x.orientation.pitch, _x.orientation.yaw, _x.brakes.main, _x.brakes.arm, _x.flipper.position, _x.flipper.velocity,) = _struct_5d2B2d.unpack(str[start:end])
      self.brakes.main = bool(self.brakes.main)
      self.brakes.arm = bool(self.brakes.arm)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.arm.turret.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.arm.turret.joint_id, _x.arm.turret.position, _x.arm.turret.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.arm.shoulder.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.arm.shoulder.joint_id, _x.arm.shoulder.position, _x.arm.shoulder.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.arm.elbow1.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.arm.elbow1.joint_id, _x.arm.elbow1.position, _x.arm.elbow1.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.arm.elbow2.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.arm.elbow2.joint_id, _x.arm.elbow2.position, _x.arm.elbow2.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.arm.tilt.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.arm.tilt.joint_id, _x.arm.tilt.position, _x.arm.tilt.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.arm.pan.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.arm.pan.joint_id, _x.arm.pan.position, _x.arm.pan.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.arm.wrist.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.arm.wrist.joint_id, _x.arm.wrist.position, _x.arm.wrist.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.arm.grip.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.arm.grip.joint_id, _x.arm.grip.position, _x.arm.grip.velocity,) = _struct_H2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_H2d = struct.Struct("<H2d")
_struct_3I = struct.Struct("<3I")
_struct_5d2B2d = struct.Struct("<5d2B2d")
