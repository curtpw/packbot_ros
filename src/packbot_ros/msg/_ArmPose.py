"""autogenerated by genmsg_py from ArmPose.msg. Do not edit."""
import roslib.message
import struct


class ArmPose(roslib.message.Message):
  _md5sum = "b689791bc5bef5ef2c41814f2e3d11de"
  _type = "packbot_ros/ArmPose"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# DRIVE=1,
# DRIVE_HIGH=4,
# LOAD_CMD=7,
# FRONT=10,
# HIGH=14,
# STAIRS=17,
# LOW=21,
# PLACE_CMD=25,
# STOW=29,
# STAND=32,
# BOX=35,
# FIBER=39,
# SHELL_WATCH=42,
# SHELL_LOAD_READY=46,
# SHELL_LOAD=52,
# SHELL_LIFT=58
# arm pose
# the value has to be one of the above
uint32 arm_pose

"""
  __slots__ = ['arm_pose']
  _slot_types = ['uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       arm_pose
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ArmPose, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.arm_pose is None:
        self.arm_pose = 0
    else:
      self.arm_pose = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_I.pack(self.arm_pose))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (self.arm_pose,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_I.pack(self.arm_pose))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.arm_pose,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
