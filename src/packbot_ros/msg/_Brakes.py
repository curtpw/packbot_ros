"""autogenerated by genmsg_py from Brakes.msg. Do not edit."""
import roslib.message
import struct


class Brakes(roslib.message.Message):
  _md5sum = "c652169e3a361b8513d88eb0850e20a8"
  _type = "packbot_ros/Brakes"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# state of the main brake
# true if the brake is engaged and false otherwise
bool main
# state of the arm brake
# true if the brake is engaged and false otherwise
bool arm

"""
  __slots__ = ['main','arm']
  _slot_types = ['bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       main,arm
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Brakes, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.main is None:
        self.main = False
      if self.arm is None:
        self.arm = False
    else:
      self.main = False
      self.arm = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2B.pack(_x.main, _x.arm))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.main, _x.arm,) = _struct_2B.unpack(str[start:end])
      self.main = bool(self.main)
      self.arm = bool(self.arm)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2B.pack(_x.main, _x.arm))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.main, _x.arm,) = _struct_2B.unpack(str[start:end])
      self.main = bool(self.main)
      self.arm = bool(self.arm)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2B = struct.Struct("<2B")
