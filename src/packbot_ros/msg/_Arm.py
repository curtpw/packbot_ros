"""autogenerated by genmsg_py from Arm.msg. Do not edit."""
import roslib.message
import struct

import packbot_ros.msg

class Arm(roslib.message.Message):
  _md5sum = "66d4e07ef40fe296715f50158cfc50b0"
  _type = "packbot_ros/Arm"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ArmJoint turret
ArmJoint shoulder
ArmJoint elbow1
ArmJoint elbow2
ArmJoint tilt
ArmJoint pan
ArmJoint wrist
ArmJoint grip

================================================================================
MSG: packbot_ros/ArmJoint
# name of the joint
string joint
# the numerical id of the joint
uint16 joint_id
# position of the joint
# unit - radian
float64 position
# velocity of the joint
# unit - radian per second
float64 velocity

"""
  __slots__ = ['turret','shoulder','elbow1','elbow2','tilt','pan','wrist','grip']
  _slot_types = ['packbot_ros/ArmJoint','packbot_ros/ArmJoint','packbot_ros/ArmJoint','packbot_ros/ArmJoint','packbot_ros/ArmJoint','packbot_ros/ArmJoint','packbot_ros/ArmJoint','packbot_ros/ArmJoint']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       turret,shoulder,elbow1,elbow2,tilt,pan,wrist,grip
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Arm, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.turret is None:
        self.turret = packbot_ros.msg.ArmJoint()
      if self.shoulder is None:
        self.shoulder = packbot_ros.msg.ArmJoint()
      if self.elbow1 is None:
        self.elbow1 = packbot_ros.msg.ArmJoint()
      if self.elbow2 is None:
        self.elbow2 = packbot_ros.msg.ArmJoint()
      if self.tilt is None:
        self.tilt = packbot_ros.msg.ArmJoint()
      if self.pan is None:
        self.pan = packbot_ros.msg.ArmJoint()
      if self.wrist is None:
        self.wrist = packbot_ros.msg.ArmJoint()
      if self.grip is None:
        self.grip = packbot_ros.msg.ArmJoint()
    else:
      self.turret = packbot_ros.msg.ArmJoint()
      self.shoulder = packbot_ros.msg.ArmJoint()
      self.elbow1 = packbot_ros.msg.ArmJoint()
      self.elbow2 = packbot_ros.msg.ArmJoint()
      self.tilt = packbot_ros.msg.ArmJoint()
      self.pan = packbot_ros.msg.ArmJoint()
      self.wrist = packbot_ros.msg.ArmJoint()
      self.grip = packbot_ros.msg.ArmJoint()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.turret.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.turret.joint_id, _x.turret.position, _x.turret.velocity))
      _x = self.shoulder.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.shoulder.joint_id, _x.shoulder.position, _x.shoulder.velocity))
      _x = self.elbow1.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.elbow1.joint_id, _x.elbow1.position, _x.elbow1.velocity))
      _x = self.elbow2.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.elbow2.joint_id, _x.elbow2.position, _x.elbow2.velocity))
      _x = self.tilt.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.tilt.joint_id, _x.tilt.position, _x.tilt.velocity))
      _x = self.pan.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.pan.joint_id, _x.pan.position, _x.pan.velocity))
      _x = self.wrist.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.wrist.joint_id, _x.wrist.position, _x.wrist.velocity))
      _x = self.grip.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.grip.joint_id, _x.grip.position, _x.grip.velocity))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.turret is None:
        self.turret = packbot_ros.msg.ArmJoint()
      if self.shoulder is None:
        self.shoulder = packbot_ros.msg.ArmJoint()
      if self.elbow1 is None:
        self.elbow1 = packbot_ros.msg.ArmJoint()
      if self.elbow2 is None:
        self.elbow2 = packbot_ros.msg.ArmJoint()
      if self.tilt is None:
        self.tilt = packbot_ros.msg.ArmJoint()
      if self.pan is None:
        self.pan = packbot_ros.msg.ArmJoint()
      if self.wrist is None:
        self.wrist = packbot_ros.msg.ArmJoint()
      if self.grip is None:
        self.grip = packbot_ros.msg.ArmJoint()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.turret.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.turret.joint_id, _x.turret.position, _x.turret.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.shoulder.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.shoulder.joint_id, _x.shoulder.position, _x.shoulder.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.elbow1.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.elbow1.joint_id, _x.elbow1.position, _x.elbow1.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.elbow2.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.elbow2.joint_id, _x.elbow2.position, _x.elbow2.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.tilt.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.tilt.joint_id, _x.tilt.position, _x.tilt.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.pan.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.pan.joint_id, _x.pan.position, _x.pan.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.wrist.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.wrist.joint_id, _x.wrist.position, _x.wrist.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.grip.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.grip.joint_id, _x.grip.position, _x.grip.velocity,) = _struct_H2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.turret.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.turret.joint_id, _x.turret.position, _x.turret.velocity))
      _x = self.shoulder.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.shoulder.joint_id, _x.shoulder.position, _x.shoulder.velocity))
      _x = self.elbow1.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.elbow1.joint_id, _x.elbow1.position, _x.elbow1.velocity))
      _x = self.elbow2.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.elbow2.joint_id, _x.elbow2.position, _x.elbow2.velocity))
      _x = self.tilt.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.tilt.joint_id, _x.tilt.position, _x.tilt.velocity))
      _x = self.pan.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.pan.joint_id, _x.pan.position, _x.pan.velocity))
      _x = self.wrist.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.wrist.joint_id, _x.wrist.position, _x.wrist.velocity))
      _x = self.grip.joint
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2d.pack(_x.grip.joint_id, _x.grip.position, _x.grip.velocity))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.turret is None:
        self.turret = packbot_ros.msg.ArmJoint()
      if self.shoulder is None:
        self.shoulder = packbot_ros.msg.ArmJoint()
      if self.elbow1 is None:
        self.elbow1 = packbot_ros.msg.ArmJoint()
      if self.elbow2 is None:
        self.elbow2 = packbot_ros.msg.ArmJoint()
      if self.tilt is None:
        self.tilt = packbot_ros.msg.ArmJoint()
      if self.pan is None:
        self.pan = packbot_ros.msg.ArmJoint()
      if self.wrist is None:
        self.wrist = packbot_ros.msg.ArmJoint()
      if self.grip is None:
        self.grip = packbot_ros.msg.ArmJoint()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.turret.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.turret.joint_id, _x.turret.position, _x.turret.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.shoulder.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.shoulder.joint_id, _x.shoulder.position, _x.shoulder.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.elbow1.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.elbow1.joint_id, _x.elbow1.position, _x.elbow1.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.elbow2.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.elbow2.joint_id, _x.elbow2.position, _x.elbow2.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.tilt.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.tilt.joint_id, _x.tilt.position, _x.tilt.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.pan.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.pan.joint_id, _x.pan.position, _x.pan.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.wrist.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.wrist.joint_id, _x.wrist.position, _x.wrist.velocity,) = _struct_H2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.grip.joint = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.grip.joint_id, _x.grip.position, _x.grip.velocity,) = _struct_H2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_H2d = struct.Struct("<H2d")
